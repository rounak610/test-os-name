name: Test Name of OS

on:
  workflow_dispatch:

jobs:
  ubuntu-job:
    name: "Test on Ubuntu"
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Print OS name using Python
        run: |
          python -c "import platform; print(f'Python - platform.system(): {platform.system()}')"

      - name: Print OS platform using Node.js
        run: |
          node -e "const os = require('os'); console.log('Node.js - os.platform():', os.platform());"

      - name: Print OS description using C# -- original method
        run: |
         dotnet new console -n OSTest -o /tmp/ostest --force
         echo -e 'using System;\nusing System.Runtime.InteropServices;\n\nConsole.WriteLine($"C# - RuntimeInformation.OSDescription.Trim(): {RuntimeInformation.OSDescription.Trim()}");' > /tmp/ostest/Program.cs
         dotnet run --project /tmp/ostest

      - name: Print OS description using C# -- new method
        run: |
          dotnet new console -n OSTest -o /tmp/ostest --force
          echo -e 'using System;\nusing System.Runtime.InteropServices;\n\nif (RuntimeInformation.IsOSPlatform(OSPlatform.Linux)) Console.WriteLine("C# - OS Platform: Linux");\nelse if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) Console.WriteLine("C# - OS Platform: Windows");\nelse if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX)) Console.WriteLine("C# - OS Platform: macOS");\nelse Console.WriteLine("C# - OS Platform: Unknown");' > /tmp/ostest/Program.cs
          dotnet run --project /tmp/ostest
